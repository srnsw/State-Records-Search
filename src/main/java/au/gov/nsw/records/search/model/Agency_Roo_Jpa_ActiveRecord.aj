// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package au.gov.nsw.records.search.model;

import au.gov.nsw.records.search.model.Agency;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Agency_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager Agency.entityManager;
    
    public static final List<String> Agency.fieldNames4OrderClauseFilter = java.util.Arrays.asList("agencyNumber", "title", "category", "creation", "abolition", "administrativeHistoryNote", "lastAmendmentDate", "startDate", "startDateQualifier", "endDate", "endDateQualifier", "functions", "organisations", "persons", "seriesControlled", "seriesCreated", "preceding", "related", "subordinates", "succeeding", "superiors");
    
    public static final EntityManager Agency.entityManager() {
        EntityManager em = new Agency().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Agency.countAgencys() {
    return entityManager().createQuery("SELECT COUNT(o) FROM Agency o", Long.class).getSingleResult();
}
    
    public static List<Agency> Agency.findAllAgencys() {
        return entityManager().createQuery("SELECT o FROM Agency o", Agency.class).getResultList();
    }
    
    public static List<Agency> Agency.findAllAgencys(String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM Agency o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, Agency.class).getResultList();
    }
    
    public static Agency Agency.findAgency(int agencyNumber) {
        return entityManager().find(Agency.class, agencyNumber);
    }
    
    public static List<Agency> Agency.findAgencyEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Agency o", Agency.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    public static List<Agency> Agency.findAgencyEntries(int firstResult, int maxResults, String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM Agency o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, Agency.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void Agency.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Agency.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Agency attached = Agency.findAgency(this.agencyNumber);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Agency.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Agency.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Agency Agency.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Agency merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
